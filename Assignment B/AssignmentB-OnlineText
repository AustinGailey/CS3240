Reflections:

B1r.  Creating a 2 state GNFA is a complex process.
    Breaking the procoess into small sections makes things much more managable.
    Removing one state at a time is also helpful.
    The best thing for this was to replace the strings of numbers with variables.
    ex. a = {1,3,5,7,9} b = {0,2,4,6,8}
    which gave the RE: 0∪((b-0)∪aa*b)(a*(aa*b)*)*
    with numbers plugged back in, this is:
    0⋃((1,4,6,8)∪(1,3,5,7,9)(1,3,5,7,9)*(0,2,4,6,8))((1,3,5,7,9)*((1,3,5,7,9)(1,3,5,7,9)*(0,2,4,6,8))*)*

B2r.
    The regex generated by hand whas quite long.  It looked like this:
    c = {0,3,6,9} d = {1,4,7} e = {2,5,8}
    0⋃(c-0)⋃(ec*d)⋃((d⋃ec*e)(c⋃dc*e)*e)(c⋃(ec*d)⋃(d(c⋃dc*e)*e))*

    RE Generated by JFLAP:
(9+3+6)(0+3+6+9)*+(1+4+7+(9+3+6)(0+3+6+9)*(1+7+4))(0+3+6+9+(8+2+5)(0+3+6+9)*(1+7+4))*(8+2+5)(0+3+6+9)*
+(8+5+2+(9+3+6)(0+3+6+9)*(5+2+8)+(1+4+7+(9+3+6)(0+3+6+9)*(1+7+4))(0+3+6+9+(8+2+5)(0+3+6+9)*(1+7+4))*(7+4+1+(8+2+5)(0+3+6+9)*(5+2+8)))
(0+3+6+9+(4+7+1)(0+3+6+9)*(5+2+8)+(8+5+2+(4+7+1)(0+3+6+9)*(1+7+4))(0+3+6+9+(8+2+5)(0+3+6+9)*(1+7+4))*(7+4+1+(8+2+5)(0+3+6+9)*(5+2+8)))*
((4+7+1)(0+3+6+9)*+(8+5+2+(4+7+1)(0+3+6+9)*(1+7+4))(0+3+6+9+(8+2+5)(0+3+6+9)*(1+7+4))*(8+2+5)(0+3+6+9)*)+0

    This is quite a long regular expression. I tried to reduce the DFA before creating it however all of the partitions are unique.

B3r.  Turns out, this regular grammar is indeed long and complex.  I was looking for something elegant.
    Taking your time and paying close attention to each step makes reviewing your work much easier.
    I also found using variables as replacement for frequently repeated strings to be very helpful.

    Creating productions is a tedious process, luckily JFLAP can create these for us.
    I am very comfortable with grammars as a conecpt from by PPL course.

B4.  L4 = { wabw : w ∈ {a,b}* } is not regular.
    By rules of pumping lemma:
    (i)   S = xy(i)z ∈ L4,
    (ii)  y ≠ ε,
    (iii) |xz| ≤ p

Proof By Contradiction:
  Assume L4 is regular
  So it must have pumping length = P  
  P = 2
  S = wabw
  S = xyz 
  for this example: w = aabb
  so S = aabbabaabb
  S broken into xyz components:
  x = aab
  y = baba
  z = abb
  xyyz (Two y's for our pumping length of 2)
  aabbabababaabb ∉ L4
  By contradiction, L4 is not a regular language.
  -
  Unofficially we can tell because it requires memory of 'w'

B5. Prove L5 is not regular
    Defining L5 = {'('^n')'^n}
    
    Proof by Contradiction:
    Assume L5 is regular
    So it must have pumping length P
    P = 2
    n = 2
    S = '('^n')'^n 
    S = xyz
    S = (())
    x = ((
    y = )
    z = )
    xyz = (())
    xyyz = (())) ∉ L5
    So by contradiction, L5 is not regular.
    
B45r.  The pumping lemma is just a proof demonstrating how memory works.
    After watching a few videos on the pumping lemma and reviewing the examples provided, these proofs were easy.
    I do believe that the term 'pumping' may be misleading.  I think 'memory' lemma may provide more accurate direction.
    I'll continue to explore this, however memory seems to be the key factor in distinguishing regular from nonregular languages.